{
	"info": {
		"_postman_id": "d9e0f4e3-6c7b-5a8d-9e1f-8a7b2c3d4e5f",
		"name": "Property Detail Tests",
		"description": "Tests for property detail endpoints including retrieval, document access requests, and error cases",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Property Details - Success",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verify required variables exist",
							"if (!pm.environment.get('property_id')) {",
							"    throw new Error('property_id environment variable is not set. Please run the Create Property test first.');",
							"}",
							"if (!pm.environment.get('auth_token')) {",
							"    throw new Error('auth_token environment variable is not set. Please run the login test first.');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Property details are correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    ",
							"    // Basic property details",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('title');",
							"    pm.expect(jsonData).to.have.property('property_type');",
							"    pm.expect(jsonData).to.have.property('description');",
							"    pm.expect(jsonData).to.have.property('location');",
							"    pm.expect(jsonData).to.have.property('status');",
							"    ",
							"    // Owner details",
							"    pm.expect(jsonData).to.have.property('owner').that.is.an('object');",
							"    pm.expect(jsonData.owner).to.have.property('name');",
							"    pm.expect(jsonData.owner).to.have.property('phone');",
							"    ",
							"    // Listing details if exists",
							"    if (jsonData.listing_id) {",
							"        pm.expect(jsonData).to.have.property('listing_type');",
							"        pm.expect(jsonData).to.have.property('price');",
							"    }",
							"    ",
							"    // Images array",
							"    pm.expect(jsonData).to.have.property('images').that.is.an('array');",
							"    ",
							"    // Verify image structure if exists",
							"    if (jsonData.images.length > 0) {",
							"        pm.expect(jsonData.images[0]).to.be.a('string');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/property/{{property_id}}/",
					"host": ["{{base_url}}"],
					"path": ["api", "property", "{{property_id}}", ""]
				},
				"description": "Retrieve details of a verified and active property"
			}
		},
		{
			"name": "Get Property Details - Unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Response has unauthorized message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.equal('Authentication required');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/property/{{property_id}}/",
					"host": ["{{base_url}}"],
					"path": ["api", "property", "{{property_id}}", ""]
				},
				"description": "Attempt to access property details without authentication"
			}
		},
		{
			"name": "Get Property Details - Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.equal('Property not found or not available');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/property/999999/",
					"host": ["{{base_url}}"],
					"path": ["api", "property", "999999", ""]
				},
				"description": "Attempt to get details of a non-existent property"
			}
		},
		{
			"name": "Get Property Details - Unverified Property",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.get('unverified_property_id')) {",
							"    throw new Error('unverified_property_id environment variable is not set. Please set it to an existing unverified property ID.');",
							"}",
							"if (!pm.environment.get('auth_token')) {",
							"    throw new Error('auth_token environment variable is not set. Please run the login test first.');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.equal('Property not found or not available');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/property/{{unverified_property_id}}/",
					"host": ["{{base_url}}"],
					"path": ["api", "property", "{{unverified_property_id}}", ""]
				},
				"description": "Attempt to access an unverified property"
			}
		},
		{
			"name": "Get Property Details - Inactive Property",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.environment.get('inactive_property_id')) {",
							"    throw new Error('inactive_property_id environment variable is not set');",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response has error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.equal('Property not found or not available');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/property/{{inactive_property_id}}/",
					"host": ["{{base_url}}"],
					"path": ["api", "property", "{{inactive_property_id}}", ""]
				},
				"description": "Attempt to access an inactive property"
			}
		},
		{
			"name": "Document Access Request Tests",
			"item": [
				{
					"name": "Request Document Access - Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Verify required variables exist",
									"if (!pm.environment.get('property_id')) {",
									"    throw new Error('property_id environment variable is not set. Please run the Create Property test first.');",
									"}",
									"if (!pm.environment.get('seeker_id')) {",
									"    throw new Error('seeker_id environment variable is not set. Please run the Register Property Seeker test first.');",
									"}",
									"if (!pm.environment.get('auth_token')) {",
									"    throw new Error('auth_token environment variable is not set. Please run the login test first.');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has correct structure\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.equal('pending');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"property_id\": \"{{property_id}}\",\n    \"requester_id\": \"{{seeker_id}}\",\n    \"reason\": \"I am interested in this property and would like to verify the ownership documents.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/document/request-access/",
							"host": ["{{base_url}}"],
							"path": ["api", "document", "request-access", ""]
						}
					}
				},
				{
					"name": "Request Document Access - Already Requested",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response has error message about existing request\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"    pm.expect(jsonData.error).to.include('already have a pending or approved request');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"property_id\": \"{{property_id}}\",\n    \"requester_id\": \"{{seeker_id}}\",\n    \"reason\": \"Second request for the same property.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/document/request-access/",
							"host": ["{{base_url}}"],
							"path": ["api", "document", "request-access", ""]
						}
					}
				},
				{
					"name": "Get Document Requests - Property Seeker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array of requests\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    if (jsonData.length > 0) {",
									"        pm.expect(jsonData[0]).to.have.property('id');",
									"        pm.expect(jsonData[0]).to.have.property('property_title');",
									"        pm.expect(jsonData[0]).to.have.property('owner_name');",
									"        pm.expect(jsonData[0]).to.have.property('status');",
									"        pm.expect(jsonData[0]).to.have.property('reason');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/document/requests/?user_id={{seeker_id}}&role=property_seeker",
							"host": ["{{base_url}}"],
							"path": ["api", "document", "requests", ""],
							"query": [
								{
									"key": "user_id",
									"value": "{{seeker_id}}"
								},
								{
									"key": "role",
									"value": "property_seeker"
								}
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
} 